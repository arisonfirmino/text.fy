generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  followers     Follow[]  @relation("UserFollowers")
  following     Follow[]  @relation("UserFollowing")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  postsLiked    Like[]    @relation("UserLikes")

  @@map("users")
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  likes      Int       @default(0)
  userId     String    @map("user_id") @db.ObjectId
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments   Comment[]
  likedBy    Like[]    @relation("PostLikes")
  created_at DateTime  @default(now())

  @@map("posts")
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  image      String?
  text       String
  post       Post     @relation(fields: [postId], references: [id])
  postId     String   @db.ObjectId
  created_at DateTime @default(now())

  @@map("comments")
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}

model Like {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  postId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserLikes")
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, name: "PostLikes")
  created_at DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}
